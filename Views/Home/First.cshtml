@{
    ViewData["Title"] = "First";
}

<h1>First Ajax Demo</h1>
<input type="button" class="btn btn-primary mb-3" value="Ajax 開始" id="buttonStart" />
<input type="button" class="btn btn-primary mb-3" value="Ajax 停止" id="buttonStop" />
<img src="~/images/loading.gif" id="imgLoading" style="display:none" />
<div class="alert alert-info" id="divInfo"></div>

@section Scripts {
    <script>
        const btnStart = document.querySelector('#buttonStart');
        const btnStop = document.querySelector('#buttonStop');
        const divInfo = document.querySelector('#divInfo');
        const imgLoading = document.querySelector('#imgLoading');

        //==============在div印出Fetch得到的BODY裡的文字==============
        // btnStart.addEventListener('click', () => {
        //     //ajax
        //     // console.log(fetch("/api/index"));
        //     fetch("@Url.Content("~/api/ContentTest")")
        //         .then(response => {
        //             console.log(response);
        //          //   console.log(response.text());
        //             return response.text();
        //         })
        //         .then(data => {
        //             console.log(data);
        //             divInfo.innerHTML = `<h2>${data}</h2>`;
        //         })
        // })

        //==============製造錯誤500會顯示在div，防止div顯示==============
        // btnStart.addEventListener('click', () => {
        //     //ajax
        //     // console.log(fetch("/api/index"));
        //     fetch("@Url.Content("~/api/ContentTest")")
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error(`錯誤:${response.status}`);
        //             }
        //             return response.text();
        //         })
        //         .then(data => {
        //             divInfo.innerHTML = `<h2>${data}</h2>`;
        //         })
        //         .catch(error => divInfo.innerHTML=error.message);
        // })

        //==============製造錯誤顯示在div，加上try/catch用async/await語法==============

        btnStop.addEventListener('click', () => { abortController.abort(); })

        btnStart.addEventListener('click', async () => {
            
            try {
                imgLoading.style.display = "inline";
                btnStart.setAttribute("disabled", "disabled");
                btnStart.Value = "執行中...";

                abortController = new AbortController();
                const signal = abortController.signal;

                setTimeout(() => {
                    abortController.abort();
                }, 5000);

                const response = await fetch("@Url.Content("~/api/ContentTest")", { signal })

                if (!response.ok) {
                    throw new Error(`錯誤代碼:${response.status}`);
                }

                const data = await response.text();
                divInfo.innerHTML = `<h2>${data}</h2>`;
            }
            catch (error) {
                let message = error.message;
                if (error.name === "AbortError") {message = "連線逾時"; }
                divInfo.innerHTML = `<h2>${error.message},${message}</h2>`;
            }
            finally {
                imgLoading.style.display = "none";
                btnStart.removeAttribute("disabled");

                console.log("完成")
            }
        })

    </script>
}